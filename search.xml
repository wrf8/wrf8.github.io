<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git --- 入门</title>
      <link href="2021/03/08/%E5%B7%A5%E5%85%B7/Git/Git-%E5%85%A5%E9%97%A8/"/>
      <url>2021/03/08/%E5%B7%A5%E5%85%B7/Git/Git-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-关于版本控制"><a href="#1-关于版本控制" class="headerlink" title="1.关于版本控制"></a>1.关于版本控制</h2><h3 id="1-1-什么是版本控制"><a href="#1-1-什么是版本控制" class="headerlink" title="1.1 什么是版本控制"></a>1.1 什么是版本控制</h3><p>版本控制是一种记录一个或若干文件(可以是任意类型的文件)内容变化，以便将来查阅特定版本修订情况的系统。</p><h3 id="1-2-为什么要用版本控制"><a href="#1-2-为什么要用版本控制" class="headerlink" title="1.2 为什么要用版本控制"></a>1.2 为什么要用版本控制</h3><p>在我们的实际开发过程中，经常会有这样的问题：</p><ol><li>多人开发同一个项目，代码合并的问题</li><li>检查某个文件的修改记录（修改人、修改时间、修改内容）</li><li>将项目代码恢复到之前的某个版本</li></ol><h3 id="1-3-历史分类"><a href="#1-3-历史分类" class="headerlink" title="1.3 历史分类"></a>1.3 历史分类</h3><p>纵观版本控制系统的发展历史，<a href="https://ericsink.com/vcbe/index.html">《Version Control By Example》</a>一书的作者 <code>Eric Sink</code> 在他的书中对版本控制进行了分类，广义上讲，版本控制工具的历史可以分为三代：</p><table><thead><tr><th align="center">代</th><th align="center">名称</th><th align="center">网络</th><th align="center">操作</th><th align="center">并发性</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">第一代</td><td align="center">本地版本控制系统</td><td align="center">无</td><td align="center">仅一个文件</td><td align="center">锁定的</td><td align="center">RCS</td></tr><tr><td align="center">第二代</td><td align="center">集中式版本控制系统</td><td align="center">集中式</td><td align="center">多文件</td><td align="center">提交之前合并</td><td align="center">CVS, SourceSafe, Subversion, Team Foundation Server</td></tr><tr><td align="center">第三代</td><td align="center">分布式版本控制系统</td><td align="center">分布式</td><td align="center">变更的集合</td><td align="center">合并之前提交</td><td align="center">Bazaar, Git, Mercurial</td></tr></tbody></table><h4 id="1-3-1-本地版本控制系统"><a href="#1-3-1-本地版本控制系统" class="headerlink" title="1.3.1 本地版本控制系统"></a>1.3.1 本地版本控制系统</h4><p>本地版本控制系统，一次只能有一个人处理文件，大多都是采用某种简单的数据库来记录文件的历次更新差异。</p><h4 id="1-3-2-集中式版本控制系统"><a href="#1-3-2-集中式版本控制系统" class="headerlink" title="1.3.2 集中式版本控制系统"></a>1.3.2 集中式版本控制系统</h4><p>集中式版本控制系统，版本库是集中存放在中央服务器的，协同工作的人都是通过客户端连接到这台服务器，取出最新的文件或者提交更新。<br><img src="/images/%E5%B7%A5%E5%85%B7/Git/git_start_category_cvcs.png"><br>由上图可看到，在集中式版本控制系统中：</p><ul><li>优点: 不同的开发者可以在不同的电脑上进行协同开发，对同步修改更加宽容</li><li>缺点: 中央服务器的单点故障。如果宕机一小时，那么在这一个小时内，谁都无法提交更新。如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，那么将丢失所有数据——包括项目的整个变更历史，只剩下各自机器上保留的单独快照。</li></ul><h4 id="1-3-3-分布式版本控制系统"><a href="#1-3-3-分布式版本控制系统" class="headerlink" title="1.3.3 分布式版本控制系统"></a>1.3.3 分布式版本控制系统</h4><p>分布式版本控制系统，允许合并和提交分开，在每个使用者电脑上都有一个完整的版本库，包括完整的历史记录，没有网络依然可以使用。<br><img src="/images/%E5%B7%A5%E5%85%B7/Git/git_start_category_dvcs.png"><br>由上图可看到，分布式式版本控制系统也可以有个服务器端的仓库，用来同步各开发者的私有仓库！在分布式版本控制系统中，每个参与者的本地也会有一个完整的仓库。即使服务器端崩溃，我们仍然可以使用 Git（仅在本地仓库管理我们的代码），在网络具备时，再和服务器进行同步即可！</p><h2 id="2-Git"><a href="#2-Git" class="headerlink" title="2.Git"></a>2.Git</h2><h3 id="2-1-Git起源"><a href="#2-1-Git起源" class="headerlink" title="2.1 Git起源"></a>2.1 Git起源</h3><p>Linus 在1991年创建了开源的 <code>Linux</code>，Linus 虽然创建了<code> Linux</code>，但 <code>Linux</code> 的壮大是靠全世界热心的志愿者参与的，初期世界各地的志愿者把源代码文件通过 <code>diff</code> 的方式发给Linus，然后由linus 本人通过 <code>linux</code> 命令 <code>diff</code> 和 <code>patch</code> 两条命令手动完成。随着 <code>Linux</code> 代码越来越壮大，靠 Linus 一个人来手动合并已经不现实。2002 年，Linus 选择了一个商业版本控制系统 <code>BitKeeper</code> 作为 <code>Linux</code> 内核的代码管理工具（<code>BitKeeper</code> 的开发商 <code>BitMover</code> 授权 <code>linux 社区</code>免费使用）。但是，免费使用是有很多的限制的，因此 <code>linux</code> 社区的大佬开始破解 <code>BitKeeper</code>。其中，<code>samba</code> 的作者 <code>andrew</code> 破解成功了。但是被 <code>BitMover</code> 公司发现，收回免费使用权。</p><p>迫不得已，Linus 选择了自己开发一个分布式版本控制工具以替代 <code>BitKeeper</code>。linus 闭关一个月，用C写出了 <code>Git</code>。在一个月后，<code>Git</code> 成功接管了 <code>Linux</code> 社区的版本控制工作，并且开始开源。</p><h3 id="2-2-Git简介"><a href="#2-2-Git简介" class="headerlink" title="2.2 Git简介"></a>2.2 Git简介</h3><p><code>Git</code> 是目前世界上最先进的分布式版本控制系统。</p><h4 id="2-2-1-Git思想"><a href="#2-2-1-Git思想" class="headerlink" title="2.2.1 Git思想"></a>2.2.1 Git思想</h4><ol><li>直接记录快照，而不是差异比较:<br> 其他版本控制系统(<code>CVS</code>、<code>Subversion</code>、<code>Perforce</code>、<code>Bazaar</code> 等等)将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异:<br> <img src="/images/%E5%B7%A5%E5%85%B7/Git/git_start_cvs_record.png"><br> 在<code>Git</code>中保存项时，它主要对当时的全部文件制作一个快照并保存这个快照的索引，<code>Git</code> 对待数据更像是一个 <code>快照流</code>。<br> <img src="/images/%E5%B7%A5%E5%85%B7/Git/git_start_git_record.png"></li><li>近乎所有操作都是本地执行</li><li>Git保证完整性: </li></ol><h4 id="2-2-2-Git工作原理"><a href="#2-2-2-Git工作原理" class="headerlink" title="2.2.2 Git工作原理"></a>2.2.2 Git工作原理</h4><h3 id="2-3-Git安装"><a href="#2-3-Git安装" class="headerlink" title="2.3 Git安装"></a>2.3 Git安装</h3><h3 id="2-4-Git配置"><a href="#2-4-Git配置" class="headerlink" title="2.4 Git配置"></a>2.4 Git配置</h3>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客 --- 主题3-hexo</title>
      <link href="2021/03/07/%E5%B7%A5%E5%85%B7/Hexo/Hexo%E5%8D%9A%E5%AE%A2---%E4%B8%BB%E9%A2%983-hexo/"/>
      <url>2021/03/07/%E5%B7%A5%E5%85%B7/Hexo/Hexo%E5%8D%9A%E5%AE%A2---%E4%B8%BB%E9%A2%983-hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="1-左侧栏"><a href="#1-左侧栏" class="headerlink" title="1.左侧栏"></a>1.左侧栏</h3><h4 id="1-1-修改左侧栏宽度"><a href="#1-1-修改左侧栏宽度" class="headerlink" title="1.1 修改左侧栏宽度"></a>1.1 修改左侧栏宽度</h4><p>打开 <code>themes/_config.yml</code> 文件中，更改对应代码对应的宽度即可</p><pre><code>width:    lg: 120 # 1468px&lt;屏幕宽度 左侧分类宽度    md: 100 # 1024px&lt;屏幕宽度&lt;=1468px 左侧分类宽度    sm: 100 # 426px&lt;屏幕宽度&lt;=1024px 左侧分类宽度（ipad）</code></pre><h4 id="1-2-修改背景颜色"><a href="#1-2-修改背景颜色" class="headerlink" title="1.2 修改背景颜色"></a>1.2 修改背景颜色</h4><p>打开<code>themes/source/css/_partial/nav-left.styl</code>文件，将<code>.nav_left</code>的<code>background</code>设置成自己喜欢的颜色即可</p><h4 id="1-3-修改图片"><a href="#1-3-修改图片" class="headerlink" title="1.3 修改图片"></a>1.3 修改图片</h4><p><code>themes/source/img</code>文件中，<code>avatar.jpg</code>为头像，<code>weixin.jpg</code>和<code>alipay.jpg</code>分别对应打赏的微信和支付宝收款图片，直接将图片替换为自己的即可 </p><h3 id="2-文章列表栏"><a href="#2-文章列表栏" class="headerlink" title="2.文章列表栏"></a>2.文章列表栏</h3><h4 id="2-1-去除文章列表时间"><a href="#2-1-去除文章列表时间" class="headerlink" title="2.1 去除文章列表时间"></a>2.1 去除文章列表时间</h4><p>打开<code>themes/layout/_partial/nav_right.ejs</code> 文件，将下面代码删除即可</p><pre><code>&lt;span class=&quot;post-date&quot; title=&quot;&lt;%= date(post.date, &#39;YYYY-MM-DD HH:mm:ss&#39;)%&gt;&quot;&gt;&lt;%= date(post.date, &#39;YYYY/MM/DD&#39;) %&gt;&lt;/span&gt;</code></pre><h3 id="3-关于写作"><a href="#3-关于写作" class="headerlink" title="3.关于写作"></a>3.关于写作</h3><h4 id="3-1-字数统计"><a href="#3-1-字数统计" class="headerlink" title="3.1 字数统计"></a>3.1 字数统计</h4><pre><code>npm i --save hexo-wordcount</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客 --- 主题安装</title>
      <link href="2021/03/07/%E5%B7%A5%E5%85%B7/Hexo/Hexo%E5%8D%9A%E5%AE%A2---%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85/"/>
      <url>2021/03/07/%E5%B7%A5%E5%85%B7/Hexo/Hexo%E5%8D%9A%E5%AE%A2---%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Terminal --- 生成SSH公钥</title>
      <link href="2021/03/07/%E5%B7%A5%E5%85%B7/Terminal/Terminal---%E7%94%9F%E6%88%90SSH%E5%85%AC%E9%92%A5/"/>
      <url>2021/03/07/%E5%B7%A5%E5%85%B7/Terminal/Terminal---%E7%94%9F%E6%88%90SSH%E5%85%AC%E9%92%A5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Terminal </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客 --- 基本配置</title>
      <link href="2021/03/06/%E5%B7%A5%E5%85%B7/Hexo/Hexo%E5%8D%9A%E5%AE%A2---%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>2021/03/06/%E5%B7%A5%E5%85%B7/Hexo/Hexo%E5%8D%9A%E5%AE%A2---%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="1-1-page"><a href="#1-1-page" class="headerlink" title="1.1 page"></a>1.1 page</h4><p>如果新建page页，可以使用</p><pre><code>hexo new page newpage</code></pre><p>系统会自动在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样访问的<code>newpage</code>对应的链接就是<a href="http://xxx.xxx/newpage">http://xxx.xxx/newpage</a></p><h5 id="1-1-1-新建分类categories页"><a href="#1-1-1-新建分类categories页" class="headerlink" title="1.1.1 新建分类categories页"></a>1.1.1 新建分类categories页</h5><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2021-03-03 08:25:30type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre><h5 id="1-1-2-新建标签tags页"><a href="#1-1-2-新建标签tags页" class="headerlink" title="1.1.2 新建标签tags页"></a>1.1.2 新建标签tags页</h5><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2021-03-03 08:25:30type: &quot;tags&quot;layout: &quot;tags&quot;---</code></pre><h5 id="1-1-3-新建关于我about页"><a href="#1-1-3-新建关于我about页" class="headerlink" title="1.1.3 新建关于我about页"></a>1.1.3 新建关于我about页</h5><p><code>about</code> 页是用来展示关于我和我的博客信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;about&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2021-03-03 08:25:30type: &quot;about&quot;layout: &quot;about&quot;---</code></pre><h5 id="1-1-4-添加404页面"><a href="#1-1-4-添加404页面" class="headerlink" title="1.1.4 添加404页面"></a>1.1.4 添加404页面</h5><p>原来的主题没有<code>404</code>页面，我们加一个。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p><pre><code>title: 404date: 2019-08-5 16:41:10type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;</code></pre><p>网上好多都说要在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件(注：我安装的主题在该目录下已有<code>404.ejs</code>文件，无需自己创建)</p><pre><code>&lt;style type=&quot;text/css&quot;&gt;    /* don&#39;t remove. */    .about-cover &#123;        height: 75vh;    &#125;&lt;/style&gt;&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;                &lt;div class=&quot;brand&quot;&gt;                    &lt;div class=&quot;title center-align&quot;&gt;                        404                    &lt;/div&gt;                    &lt;div class=&quot;description center-align&quot;&gt;                        &lt;%= page.description %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    // 每天切换 banner 图.  Switch banner image every day.    $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);&lt;/script&gt;</code></pre><h4 id="1-2-文章"><a href="#1-2-文章" class="headerlink" title="1.2 文章"></a>1.2 文章</h4><h5 id="1-2-1-创建文章模版"><a href="#1-2-1-创建文章模版" class="headerlink" title="1.2.1 创建文章模版"></a>1.2.1 创建文章模版</h5><p>为了新建文章方便，我们可以修改一下文章模板，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre><code>---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;author: img: coverImg: top: falsecover: falsetoc: truemathjax: falsepassword:summary:tags:categories:---</code></pre><p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了</p><h5 id="1-2-2-Front-matter"><a href="#1-2-2-Front-matter" class="headerlink" title="1.2.2 Front-matter"></a>1.2.2 Front-matter</h5><p><code>Front-matter</code> 选项中的所有内容均为非必填的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值</p><table><thead><tr><th align="center">配置选项</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">Markdown的文件标题</td><td align="center">文章标题</td></tr><tr><td align="center">date</td><td align="center">文件创建时的日期时间</td><td align="center">发布时间</td></tr><tr><td align="center">author</td><td align="center">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="center">文章作者</td></tr><tr><td align="center">img</td><td align="center"><code>featureImages</code> 中的某个值</td><td align="center">文章特征图</td></tr><tr><td align="center">top</td><td align="center"><code>true</code></td><td align="center">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="center">cover</td><td align="center"><code>false</code></td><td align="center">表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="center">coverImg</td><td align="center">无</td><td align="center">表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="center">password</td><td align="center">无</td><td align="center">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="center">toc</td><td align="center"><code>true</code></td><td align="center">是否开启 <code>TOC</code>，可以针对某篇文章单独关闭 <code>TOC</code> 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="center">mathjax</td><td align="center"><code>false</code></td><td align="center">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="center">summary</td><td align="center">无</td><td align="center">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="center">categories</td><td align="center">无</td><td align="center">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="center">tags</td><td align="center">无</td><td align="center">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p>注意：</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 <code>Front-matter</code> 中设置采用了 <code>SHA256</code> 加密的 <code>password</code> 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 <code>SHA256</code> 加密的地址，可供使用：开源中国在线工具、chahuo、站长工具。</li></ol></blockquote><h5 id="1-2-3-文章添加图片"><a href="#1-2-3-文章添加图片" class="headerlink" title="1.2.3 文章添加图片"></a>1.2.3 文章添加图片</h5>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客 --- 环境搭建</title>
      <link href="2021/03/06/%E5%B7%A5%E5%85%B7/Hexo/Hexo%E5%8D%9A%E5%AE%A2---%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>2021/03/06/%E5%B7%A5%E5%85%B7/Hexo/Hexo%E5%8D%9A%E5%AE%A2---%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="1-关于博客"><a href="#1-关于博客" class="headerlink" title="1.关于博客"></a>1.关于博客</h2><p>常见的写博客的途径有：</p><ul><li><code>借助平台</code>，比如掘金、CSDN、博客园、简书、有道云笔记等，这些平台的用户交互做的很好，但是缺乏个性化，有的更甚至需要购买会员，才能解锁所有功能。</li><li><code>自己购买域名和服务器</code>，虽然完全可以按照自己的想法来搭建，但是搭建成本比较高，还需要定期去维护，对于大多数来说，一可能没有这样的精力和时间，二没有这样的技术能力。</li><li><code>开源框架+GitHub</code>，这种方式就比较方便了，不用我们自己维护更新，网上有很多的搭建和个性化定制博客的教程，我们按照教程就可以慢慢搭建成我们自己想要的博客。</li></ul><blockquote><p>之前写文章用的比较多的是印象笔记，较早时候感觉印象笔记还是挺好的，但是随着后来自己要求的慢慢变高，就觉得印象笔记里面编辑出来的文章样式不满足自己的需求，再加上创建带目录的文章竟然需要购买会员。然后就萌生自己搭建博客的想法，然后就从网上查了相关资料和介绍，在前人的基础上搭建了一个简单的博客(<code>Hexo+GitHub</code>)</p></blockquote><p>本篇博客旨在记录自己的搭建过程，方便以后的查看和修改，当然还有一些优化项和功能后续会慢慢更新。</p><h2 id="2-关于Hexo"><a href="#2-关于Hexo" class="headerlink" title="2.关于Hexo"></a>2.关于Hexo</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a>基于<code>Node.js</code>，使用 <code>Markdown</code>（或其他渲染引擎）解析文章，在几秒内，可利用靓丽的主题生成静态网页，而且只需两三条命令即可将生成的网页上传到<code>github</code>等代码管理托管平台，简单、快速，是搭建博客的首选框架。</p><blockquote><p><code>Hexo</code>的作者是来自台湾的 <a href="https://zespia.tw/">Tommy Chen</a>，对中文的支持很友好，可以选择中文进行查看。</p></blockquote><p>Hexo特点:</p><ul><li>部署方便并且速度</li><li>支持 <code>Markdown</code>语法</li><li>使用极简命令即可部署到<code>GitHub Pages</code></li><li>高扩展性、可个性化定制</li><li>兼容于 <code>Windows</code>, <code>Mac</code> &amp; <code>Linux</code></li></ul><h2 id="3-搭建"><a href="#3-搭建" class="headerlink" title="3.搭建"></a>3.搭建</h2><p>本人使用Mac电脑，以此只记录了Mac电脑下的搭建过程</p><h3 id="3-1-安装Git"><a href="#3-1-安装Git" class="headerlink" title="3.1 安装Git"></a>3.1 安装Git</h3><p>什么是<code>Git</code>？关于<code>Git</code>，廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a>讲的特别好，大家可以去看看，也可以直接查看 <a href="https://git-scm.com/book/zh/v2">Git官网 Pro Git Book</a>中的讲解。而我们为了把本地的网页文件上传到<code>github</code>上面去，需要用到分布式版本控制工具<code>Git</code>。</p><p>在 <code>Mac</code> 上安装 <code>Git</code> 有多种方式。最简单的方法是安装 <code>Xcode Command Line Tools</code>。 Mavericks（10.9）或更高版本的系统中，在 <code>Terminal</code> 里尝试首次运行 <code>git</code> 命令即可。</p><pre><code>$ git --version</code></pre><p>如果没有安装过命令行开发者工具，将会提示你安装。</p><p>如果你想安装更新的版本，可以使用二进制安装程序。 官方维护的 macOS Git 安装程序可以在 Git 官方网站下载，网址为 <a href="https://git-scm.com/download/mac%E3%80%82">https://git-scm.com/download/mac。</a></p><pre><code>git --version</code></pre><blockquote><p>如果你想安装更新的版本，可以使用二进制安装程序。官方维护的 <code>macOS Git</code> 安装程序可以在 <code>Git</code> 官方网站下载，网址为 <a href="https://git-scm.com/download/mac">https://git-scm.com/download/mac</a></p></blockquote><h3 id="3-2-安装Node-js"><a href="#3-2-安装Node-js" class="headerlink" title="3.2 安装Node.js"></a>3.2 安装Node.js</h3><p>打开 <a href="https://nodejs.org/en/download/">Node.js</a> 下载页面，直接选择 <code>macOS Installer</code> 下载，然后双击已下载的<code>pkg</code>文件安装即可。<br><img src="/images/%E5%B7%A5%E5%85%B7/Hexo/hexo_node_js_download.png"><br>安装完成之后，可通过以下命令来检查是否安装成功:</p><pre><code>node -v</code></pre><h3 id="3-3-安装Hexo"><a href="#3-3-安装Hexo" class="headerlink" title="3.3 安装Hexo"></a>3.3 安装Hexo</h3><p>安装完 <code>Git</code> 和 <code>Node.js</code>之后，即可使用 <code>npm</code> 安装 <code>Hexo</code>。终端输入如下命令：</p><pre><code>sudo npm install -g hexo-cli</code></pre><p>安装完成之后输入 <code>hexo -v</code> 验证是否安装成功。</p><blockquote><p>Hexo官网上的安装命令是 <code>npm install -g hexo-cli</code>，但是实际安装的时候需要加上 <code>sudo</code>，否则会因为权限问题报错而导致安装失败</p></blockquote><h4 id="3-3-1-初始化"><a href="#3-3-1-初始化" class="headerlink" title="3.3.1 初始化"></a>3.3.1 初始化</h4><p>使用终端 <code>cd</code> 到一个文件目录，执行以下命令（命令中的 <code>Blog</code> 是要创建的博客文件夹）:</p><pre><code>hexo init Blog</code></pre><p>使用终端 <code>cd</code> 到 <code>Blog</code> 文件夹下，执行以下命令，安装必备的组件：</p><pre><code>cd Blognpm install</code></pre><p>安装完成之后，<code>Blog</code> 目录下有：</p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>: 存放生成的页面</li><li><code>scaffolds</code>: 生成文章的一些模板</li><li><code>source</code>: 用来存放你的文章</li><li><code>themes</code>: 安装的主题</li><li><code>_config.yml</code>: 博客的配置文件</li></ul><h4 id="3-3-2-本地预览"><a href="#3-3-2-本地预览" class="headerlink" title="3.3.2 本地预览"></a>3.3.2 本地预览</h4><p>经过上面步骤之后，基本的博客系统就已经搭建好了，而且自带了 <code>landscape</code> 主题，执行如下命令，开启本地 <code>Hexo</code> 服务器:</p><pre><code>sudo npm install hexo-server  //安装hexo serverhexo generate //或者 hexo g，生成静态页面hexo server //或者 hexo s，本地预览</code></pre><p>然后浏览器打开<a href="http://localhost:4000/">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下：<br><img src="/images/%E5%B7%A5%E5%85%B7/Hexo/hexo_blog_preview.png"></p><h3 id="3-4-将Hexo部署到GitHub-Pages"><a href="#3-4-将Hexo部署到GitHub-Pages" class="headerlink" title="3.4 将Hexo部署到GitHub Pages"></a>3.4 将Hexo部署到GitHub Pages</h3><h4 id="3-4-1-创建仓库"><a href="#3-4-1-创建仓库" class="headerlink" title="3.4.1 创建仓库"></a>3.4.1 创建仓库</h4><p>登录 <a href="https://github.com/">GitHub</a> 账号，新建名称为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 的仓库，具体如下图所示：<br><img src="/images/%E5%B7%A5%E5%85%B7/Hexo/hexo_github_repository_creat.png"></p><h4 id="3-4-2-开启GitHub-Pages"><a href="#3-4-2-开启GitHub-Pages" class="headerlink" title="3.4.2 开启GitHub Pages"></a>3.4.2 开启GitHub Pages</h4><p><img src="/images/%E5%B7%A5%E5%85%B7/Hexo/hexo_github_repository_setting.png"><br>点击 <code>setting</code> ,打开创建的仓库的设置页面，滑动到 <code>GitHub Pages</code> 位置，进行如下设置，这样才能通过 <code>&lt;你的 GitHub 用户名&gt;.github.io</code>来访问<br><img src="/images/%E5%B7%A5%E5%85%B7/Hexo/hexo_github_repository_pages.png"></p><h4 id="3-4-3-生成SSH添加到GitHub"><a href="#3-4-3-生成SSH添加到GitHub" class="headerlink" title="3.4.3 生成SSH添加到GitHub"></a>3.4.3 生成SSH添加到GitHub</h4><p><code>GitHub</code> 使用 <code>SSH</code> 公钥进行认证，关于 <code>SSH</code> 相关内容可以直接查看另一篇博客<a href="2021/03/07/%E5%B7%A5%E5%85%B7/Terminal/Terminal---%E7%94%9F%E6%88%90SSH%E5%85%AC%E9%92%A5">Terminal—生成SSH公钥</a></p><p>在 <code>GitHub</code> 中，点击头像打开 <code>Setting</code> 页面，将 <code>SSH</code> 添加到 <code>SSH and GPG keys</code>中，如下图所示：<br><img src="/images/%E5%B7%A5%E5%85%B7/Hexo/hexo_github_ssh.png"><br>然后在终端输入 <code>ssh -T git@github.com</code>，如果出现 <code>Hi xxx! You&#39;ve successfully authenticated...</code>，那么恭喜你，添加成功了。</p><h4 id="3-4-4-将Hexo部署到GitHub-Pages"><a href="#3-4-4-将Hexo部署到GitHub-Pages" class="headerlink" title="3.4.4 将Hexo部署到GitHub Pages"></a>3.4.4 将Hexo部署到GitHub Pages</h4><p>打开 <code>Blog</code> 根目录下的 <code>_config.yml</code> 文件，这是博客的配置文件，在这里可以修改博客配置的各种相关信息，修改 <code>deploy</code> 相关信息如下：</p><pre><code>deploy:  type: git  repository: https://github.com/xxx/xxx.github.io.git //此地址为自己github的仓库地址  branch: master</code></pre><blockquote><p>修改 <code>_config.yml</code> 文件时，所有的冒号 <code>:</code> 后面都要加一个空格，否则执行命令时会报错。</p></blockquote><p>配置之后，<code>Hexo</code> 和 <code>GitHub</code> 就能关联起来，部署时，就可以将生成的静态网页上传到上面填写的仓库中。</p><p>然后就可以通过下面命令，将本地 <code>Hexo</code> 博客部署到 <code>GitHub</code> 上：</p><pre><code>npm install hexo-deployer-git --save //安装 deploy-githexo clean  //清除之前生成的静态文件hexo g  //生成静态页面至public目录hexo d  //将.deploy目录部署到GitHub</code></pre><p>至此博客已部署完成，可以通过 <code>https://xxx.github.io/</code> 来访问你的博客啦！！！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
